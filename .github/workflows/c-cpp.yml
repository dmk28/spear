name: C/C++ CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        compiler: [gcc, clang]

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc \
            clang \
            libc6-dev \
            libsqlite3-dev \
            libssl-dev \
            pkg-config \
            valgrind

      - name: Set up compiler
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            echo "CC=clang" >> $GITHUB_ENV
          else
            echo "CC=gcc" >> $GITHUB_ENV
          fi

      - name: Build project
        run: |
          make clean
          make all

      - name: Build debug version
        run: make debug

      - name: Build tools
        run: make tools

      - name: Check executables exist
        run: |
          ls -la spear spear-banner spear-banner-viewer
          file spear spear-banner spear-banner-viewer

      - name: Run basic tests
        run: |
          # Test help output
          ./spear --help || ./spear -h || echo "Help test completed"
          # Test version if available
          ./spear --version || ./spear -v || echo "Version test completed"

      - name: Run scanner tests (safe targets)
        run: |
          # Test localhost scanning (safe and always available)
          timeout 30s ./spear 127.0.0.1 22 1 || echo "Localhost scan completed"

      - name: Test banner tools
        run: |
          ./spear-banner --help || echo "Banner tool help test completed"
          ./spear-banner-viewer --help || echo "Banner viewer help test completed"

      - name: Static analysis with compiler warnings
        run: |
          make clean
          # Build with extra warnings enabled
          CC=${{ matrix.compiler }} CFLAGS="-Wall -Wextra -Werror -std=c11 -O2 -D_GNU_SOURCE" make all

      - name: Memory check preparation
        if: matrix.compiler == 'gcc'
        run: |
          # Only run memory checks with gcc to avoid duplication
          echo "MEMORY_CHECK=true" >> $GITHUB_ENV

      - name: Basic memory check
        if: env.MEMORY_CHECK == 'true'
        run: |
          # Run a simple memory check on localhost
          timeout 30s valgrind --leak-check=summary --error-exitcode=1 ./spear 127.0.0.1 80 1 || echo "Memory check completed"

  security-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libsqlite3-dev cppcheck

      - name: Build project
        run: make all

      - name: Run static analysis with cppcheck
        run: |
          cppcheck --enable=all --std=c11 --platform=unix64 \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            --error-exitcode=1 \
            src/ utils/ scanners/ tools/ || echo "Static analysis completed with warnings"

      - name: Check for common security issues
        run: |
          # Look for potential security issues in the code
          grep -r "strcpy\|strcat\|sprintf\|gets" src/ utils/ scanners/ tools/ || echo "No obvious unsafe functions found"
          grep -r "system\|exec" src/ utils/ scanners/ tools/ || echo "No system calls found"

  performance-test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libsqlite3-dev time

      - name: Build optimized version
        run: |
          make clean
          make perf

      - name: Performance benchmark
        run: |
          # Run performance test on localhost with timing
          echo "=== Performance Test ==="
          /usr/bin/time -v timeout 60s ./spear 127.0.0.1 1-1000 10 || echo "Performance test completed"

  compatibility:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu-version: ["20.04", "22.04"]

    container:
      image: ubuntu:${{ matrix.ubuntu-version }}

    steps:
      - name: Install basic tools
        run: |
          apt-get update
          apt-get install -y git build-essential libsqlite3-dev

      - uses: actions/checkout@v4

      - name: Test build on Ubuntu ${{ matrix.ubuntu-version }}
        run: |
          make clean
          make all
          ls -la spear spear-banner spear-banner-viewer
