name: C/C++ CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          # Use ubuntu-latest instead of 20.04 to avoid runner shortages
          - os: ubuntu-latest
            compiler: gcc
          - os: ubuntu-latest
            compiler: clang
          # Keep one 22.04 test for compatibility
          - os: ubuntu-22.04
            compiler: gcc

    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.apt-cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Makefile') }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc \
            clang \
            libc6-dev \
            libsqlite3-dev \
            libssl-dev \
            pkg-config \
            valgrind \
            cppcheck

      - name: Set up compiler
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          else
            echo "CC=gcc" >> $GITHUB_ENV
            echo "CXX=g++" >> $GITHUB_ENV
          fi

      - name: Build project
        run: |
          make clean
          make all

      - name: Build debug version
        run: make debug

      - name: Build tools
        run: make tools

      - name: Check executables exist
        run: |
          ls -la spear spear-banner spear-banner-viewer
          file spear spear-banner spear-banner-viewer

      - name: Run basic tests
        timeout-minutes: 5
        run: |
          # Test help output
          ./spear --help || ./spear -h || echo "Help test completed"
          # Test version if available
          ./spear --version || ./spear -v || echo "Version test completed"

      - name: Run scanner tests (safe targets)
        timeout-minutes: 5
        run: |
          # Test localhost scanning (safe and always available)
          timeout 30s ./spear 127.0.0.1 22 1 || echo "Localhost scan completed"

      - name: Test banner tools
        timeout-minutes: 2
        run: |
          ./spear-banner --help || echo "Banner tool help test completed"
          ./spear-banner-viewer --help || echo "Banner viewer help test completed"

      - name: Static analysis with compiler warnings
        run: |
          make clean
          # Build with extra warnings enabled
          CC=${{ matrix.compiler }} CFLAGS="-Wall -Wextra -Werror -std=c11 -O2 -D_GNU_SOURCE" make all

      - name: Static analysis with cppcheck
        run: |
          cppcheck --enable=warning,style,performance --std=c11 --platform=unix64 \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            --error-exitcode=0 \
            src/ utils/ scanners/ tools/ || echo "Static analysis completed"

      - name: Memory check (GCC only)
        if: matrix.compiler == 'gcc'
        timeout-minutes: 5
        run: |
          # Run a simple memory check on localhost
          timeout 30s valgrind --leak-check=summary --error-exitcode=1 ./spear 127.0.0.1 80 1 || echo "Memory check completed"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spear-${{ matrix.os }}-${{ matrix.compiler }}
          path: |
            spear
            spear-banner
            spear-banner-viewer

  compatibility:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        ubuntu-version: ["20.04", "22.04"]

    container:
      image: ubuntu:${{ matrix.ubuntu-version }}

    steps:
      - name: Install basic tools
        run: |
          apt-get update
          apt-get install -y git build-essential libsqlite3-dev

      - uses: actions/checkout@v4

      - name: Test build on Ubuntu ${{ matrix.ubuntu-version }}
        timeout-minutes: 10
        run: |
          make clean
          make all
          ls -la spear spear-banner spear-banner-viewer

  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'security'))

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libsqlite3-dev cppcheck

      - name: Build project
        run: make all

      - name: Run comprehensive static analysis
        run: |
          cppcheck --enable=all --std=c11 --platform=unix64 \
            --suppress=missingIncludeSystem \
            --suppress=unusedFunction \
            --xml --xml-version=2 \
            src/ utils/ scanners/ tools/ 2> cppcheck-report.xml || echo "Static analysis completed"

      - name: Check for security patterns
        run: |
          echo "=== Checking for potentially unsafe functions ==="
          grep -rn "strcpy\|strcat\|sprintf\|gets\|scanf" src/ utils/ scanners/ tools/ || echo "No obvious unsafe functions found"
          echo "=== Checking for system calls ==="
          grep -rn "system\|exec\|popen" src/ utils/ scanners/ tools/ || echo "No system calls found"

  performance-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libsqlite3-dev time

      - name: Build optimized version
        run: |
          make clean
          make perf

      - name: Performance benchmark
        timeout-minutes: 5
        run: |
          echo "=== Performance Test ==="
          /usr/bin/time -v timeout 60s ./spear 127.0.0.1 1-100 10 || echo "Performance test completed"

  summary:
    runs-on: ubuntu-latest
    needs: [build, compatibility]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Check build results
        run: |
          echo "Build job status: ${{ needs.build.result }}"
          echo "Compatibility job status: ${{ needs.compatibility.result }}"

          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Build jobs failed"
            exit 1
          fi

          if [ "${{ needs.compatibility.result }}" != "success" ]; then
            echo "❌ Compatibility jobs failed"
            exit 1
          fi

          echo "✅ All required jobs passed!"
